# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zO4Ekt-jQBcMnPCp54a96hls5idHOV4w
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os
import time
import random
from datetime import datetime

# 🎨 Page config
st.set_page_config(page_title="📚 Book Genre Preference Survey", page_icon="📖")

st.title("📚 Book Genre Preference Survey")
st.markdown("Predict your **preferred book genre** using machine learning!")

# 🧠 Load model, scaler, encoders
with open("model.pkl", "rb") as f:
    model = pickle.load(f)
with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)
with open("encoders.pkl", "rb") as f:
    encoders = pickle.load(f)

st.success("✅ Model and preprocessors loaded!")

# 🎭 Emoji map for genres
emoji_map = {
    "Fantasy": "🧙‍♂️",
    "Romance": "💖",
    "Mystery": "🕵️‍♀️",
    "Science Fiction": "🚀",
    "Nonfiction": "📘",
    "Horror": "👻",
    "Comedy": "😂"
}

# ✍️ User Input
st.header("✍️ Enter Your Preferences")

input_data = {}
categorical_fields = list(encoders.keys())
numerical_fields = ["Age", "Books_Read_Per_Year"]  # ← Replace with your real fields

for field in categorical_fields:
    options = list(encoders[field].classes_)
    input_data[field] = st.selectbox(field, options)

for field in numerical_fields:
    input_data[field] = st.number_input(field, min_value=0.0)

submit = st.button("🎯 Predict My Book Genre")

# 🔍 Prediction logic
if submit:
    st.header("🔍 Prediction Result")

    # Encode and scale input
    encoded_input = []
    for field in categorical_fields:
        encoded_val = encoders[field].transform([input_data[field]])[0]
        encoded_input.append(encoded_val)
    for field in numerical_fields:
        encoded_input.append(input_data[field])

    X_input = np.array([encoded_input])
    X_scaled = scaler.transform(X_input)

    # 🎬 Spinner effect
    with st.spinner("🔍 Analyzing your preferences..."):
        time.sleep(2)
        pred = model.predict(X_scaled)[0]

    genre_emoji = emoji_map.get(pred, "📚")
    st.success(f"{genre_emoji} Your Preferred Book Genre is: **{pred}** {genre_emoji}")

    # 🎈 Fun effects
    st.balloons()
    st.snow()

    # 💬 Quote of the day
    quotes = [
        "“A reader lives a thousand lives before he dies.” – George R.R. Martin",
        "“So many books, so little time.” – Frank Zappa",
        "“Until I feared I would lose it, I never loved to read.” – Harper Lee",
        "“Books are a uniquely portable magic.” – Stephen King"
    ]
    st.info(f"📖 **Quote of the Day:** {random.choice(quotes)}")

    # 🌀 Try again button
    if st.button("🔄 Try Again"):
        st.experimental_rerun()

    # 😄 Emoji feedback
    st.header("😄 How do you feel about your result?")
    feedback = st.radio(
        "React with an emoji!",
        ["😍 Loved it!", "🙂 It's okay", "😐 Meh", "😕 Not accurate", "😡 Hate it!"]
    )

    if feedback:
        st.success(f"Thanks for your feedback! {feedback}")

        # 🗂️ Save Feedback to CSV
        log_data = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "predicted_genre": pred,
            "feedback": feedback
        }
        log_data.update(input_data)
        log_df = pd.DataFrame([log_data])

        log_file = "feedback_log.csv"
        if os.path.exists(log_file):
            log_df.to_csv(log_file, mode='a', header=False, index=False)
        else:
            log_df.to_csv(log_file, index=False)

        st.info("📁 Your feedback has been saved!")
